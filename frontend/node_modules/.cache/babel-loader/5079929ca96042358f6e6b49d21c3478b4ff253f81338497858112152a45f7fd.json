{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst mysql = require('mysql2');\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\n\n// MySQL Database Connection\nconst db = mysql.createConnection({\n  host: '127.0.0.1',\n  user: 'root',\n  password: 'AB12cd34@.',\n  // Your database password\n  database: 'CSE'\n});\ndb.connect(err => {\n  if (err) {\n    console.error('Database connection failed:', err.stack);\n    return;\n  }\n  console.log('Connected to the MySQL database.');\n});\n\n// JWT Secret Key\nconst SECRET_KEY = 'your_secret_key';\n\n// Helper function to send error responses\nconst sendError = (res, message, status = 400) => {\n  res.status(status).json({\n    success: false,\n    message\n  });\n};\n\n// User Sign-Up Route\napp.post('/signup', (req, res) => {\n  const {\n    user_id,\n    name,\n    email,\n    password,\n    phone_number,\n    role\n  } = req.body;\n  if (!user_id || !name || !email || !password || !role) {\n    return sendError(res, 'All fields are required.');\n  }\n  const checkUserIdQuery = 'SELECT * FROM User WHERE user_id = ?';\n  db.query(checkUserIdQuery, [user_id], (err, results) => {\n    if (err) {\n      return sendError(res, 'Database query error.', 500);\n    }\n    if (results.length > 0) {\n      return sendError(res, 'User ID already exists.');\n    }\n    bcrypt.hash(password, 10, (err, hashedPassword) => {\n      if (err) {\n        return sendError(res, 'Error during password hashing.', 500);\n      }\n      const query = `\n        INSERT INTO User (user_id, name, email, password, phone_number, role)\n        VALUES (?, ?, ?, ?, ?, ?)\n      `;\n      db.query(query, [user_id, name, email, hashedPassword, phone_number, role], err => {\n        if (err) {\n          return sendError(res, 'Error during sign-up.', 500);\n        }\n        res.json({\n          success: true,\n          message: 'User created successfully!'\n        });\n      });\n    });\n  });\n});\n\n// User Login Route\napp.post('/login', (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  if (!email || !password) {\n    return sendError(res, 'Email and password are required.');\n  }\n  const query = 'SELECT * FROM User WHERE email = ?';\n  db.query(query, [email], (err, results) => {\n    if (err) {\n      return sendError(res, 'Database query error.', 500);\n    }\n    if (results.length === 0) {\n      return sendError(res, 'Invalid email or password.');\n    }\n    const user = results[0];\n    bcrypt.compare(password, user.password, (err, match) => {\n      if (err || !match) {\n        return sendError(res, 'Invalid email or password.');\n      }\n      const token = jwt.sign({\n        user_id: user.user_id,\n        role: user.role\n      }, SECRET_KEY, {\n        expiresIn: '1h'\n      });\n      res.json({\n        success: true,\n        token\n      });\n    });\n  });\n});\n\n// Dashboard Route (Authenticated)\nconst authenticateJWT = (req, res, next) => {\n  var _req$header;\n  const token = (_req$header = req.header('Authorization')) === null || _req$header === void 0 ? void 0 : _req$header.split(' ')[1];\n  if (!token) {\n    return sendError(res, 'Access denied. No token provided.', 403);\n  }\n  jwt.verify(token, SECRET_KEY, (err, user) => {\n    if (err) {\n      return sendError(res, 'Invalid token.', 403);\n    }\n    req.user = user;\n    next();\n  });\n};\napp.get('/dashboard', authenticateJWT, (req, res) => {\n  res.json({\n    success: true,\n    message: `Welcome, ${req.user.user_id}`\n  });\n});\n\n// Server Setup\nconst port = 8000;\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","cors","bodyParser","bcrypt","jwt","mysql","app","use","json","db","createConnection","host","user","password","database","connect","err","console","error","stack","log","SECRET_KEY","sendError","res","message","status","success","post","req","user_id","name","email","phone_number","role","body","checkUserIdQuery","query","results","length","hash","hashedPassword","compare","match","token","sign","expiresIn","authenticateJWT","next","_req$header","header","split","verify","get","port","listen"],"sources":["C:/pl/CSE_CU_portfolio/frontend/src/components/Dashboard.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst mysql = require('mysql2');\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// MySQL Database Connection\r\nconst db = mysql.createConnection({\r\n  host: '127.0.0.1',\r\n  user: 'root',\r\n  password: 'AB12cd34@.', // Your database password\r\n  database: 'CSE',\r\n});\r\n\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error('Database connection failed:', err.stack);\r\n    return;\r\n  }\r\n  console.log('Connected to the MySQL database.');\r\n});\r\n\r\n// JWT Secret Key\r\nconst SECRET_KEY = 'your_secret_key';\r\n\r\n// Helper function to send error responses\r\nconst sendError = (res, message, status = 400) => {\r\n  res.status(status).json({ success: false, message });\r\n};\r\n\r\n// User Sign-Up Route\r\napp.post('/signup', (req, res) => {\r\n  const { user_id, name, email, password, phone_number, role } = req.body;\r\n\r\n  if (!user_id || !name || !email || !password || !role) {\r\n    return sendError(res, 'All fields are required.');\r\n  }\r\n\r\n  const checkUserIdQuery = 'SELECT * FROM User WHERE user_id = ?';\r\n  db.query(checkUserIdQuery, [user_id], (err, results) => {\r\n    if (err) {\r\n      return sendError(res, 'Database query error.', 500);\r\n    }\r\n    if (results.length > 0) {\r\n      return sendError(res, 'User ID already exists.');\r\n    }\r\n\r\n    bcrypt.hash(password, 10, (err, hashedPassword) => {\r\n      if (err) {\r\n        return sendError(res, 'Error during password hashing.', 500);\r\n      }\r\n\r\n      const query = `\r\n        INSERT INTO User (user_id, name, email, password, phone_number, role)\r\n        VALUES (?, ?, ?, ?, ?, ?)\r\n      `;\r\n      db.query(query, [user_id, name, email, hashedPassword, phone_number, role], (err) => {\r\n        if (err) {\r\n          return sendError(res, 'Error during sign-up.', 500);\r\n        }\r\n        res.json({ success: true, message: 'User created successfully!' });\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n// User Login Route\r\napp.post('/login', (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    return sendError(res, 'Email and password are required.');\r\n  }\r\n\r\n  const query = 'SELECT * FROM User WHERE email = ?';\r\n  db.query(query, [email], (err, results) => {\r\n    if (err) {\r\n      return sendError(res, 'Database query error.', 500);\r\n    }\r\n    if (results.length === 0) {\r\n      return sendError(res, 'Invalid email or password.');\r\n    }\r\n\r\n    const user = results[0];\r\n    bcrypt.compare(password, user.password, (err, match) => {\r\n      if (err || !match) {\r\n        return sendError(res, 'Invalid email or password.');\r\n      }\r\n\r\n      const token = jwt.sign({ user_id: user.user_id, role: user.role }, SECRET_KEY, {\r\n        expiresIn: '1h',\r\n      });\r\n\r\n      res.json({ success: true, token });\r\n    });\r\n  });\r\n});\r\n\r\n// Dashboard Route (Authenticated)\r\nconst authenticateJWT = (req, res, next) => {\r\n  const token = req.header('Authorization')?.split(' ')[1];\r\n\r\n  if (!token) {\r\n    return sendError(res, 'Access denied. No token provided.', 403);\r\n  }\r\n\r\n  jwt.verify(token, SECRET_KEY, (err, user) => {\r\n    if (err) {\r\n      return sendError(res, 'Invalid token.', 403);\r\n    }\r\n    req.user = user;\r\n    next();\r\n  });\r\n};\r\n\r\napp.get('/dashboard', authenticateJWT, (req, res) => {\r\n  res.json({ success: true, message: `Welcome, ${req.user.user_id}` });\r\n});\r\n\r\n// Server Setup\r\nconst port = 8000;\r\napp.listen(port, () => {\r\n  console.log(`Server running on http://localhost:${port}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}